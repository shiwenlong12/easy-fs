var searchIndex = JSON.parse('{\
"bitflags":{"doc":"A typesafe bitmask flag generator useful for sets of …","t":[14],"n":["bitflags"],"q":["bitflags"],"d":["The macro used to generate the flag structures."],"i":[0],"f":[0],"p":[]},\
"cfg_if":{"doc":"A macro for defining <code>#[cfg]</code> if-else statements.","t":[14],"n":["cfg_if"],"q":["cfg_if"],"d":["The main macro provided by this crate. See crate …"],"i":[0],"f":[0],"p":[]},\
"easy_fs":{"doc":"An easy file system isolated from the kernel","t":[17,8,18,3,8,3,3,3,18,18,18,3,18,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,12,10,11,11,11,12,11,10,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,12,11,10],"n":["BLOCK_SZ","BlockDevice","CREATE","EasyFileSystem","FSManager","FileHandle","Inode","OpenFlags","RDONLY","RDWR","TRUNC","UserBuffer","WRONLY","all","alloc_data","alloc_inode","bitand","bitand_assign","bitor","bitor_assign","bits","bitxor","bitxor_assign","block_device","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","buffers","clear","clone","clone","clone_into","clone_into","cmp","complement","contains","create","create","data_bitmap","dealloc_data","difference","empty","empty","eq","extend","find","find","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from_bits","from_bits_truncate","from_bits_unchecked","from_iter","get_data_block_id","get_disk_inode_pos","hash","inode","inode_bitmap","insert","intersection","intersects","into","into","into","into","into","is_all","is_empty","len","link","new","new","new","not","offset","open","open","partial_cmp","read","read","read_at","read_block","read_write","readable","readdir","readdir","remove","root_inode","set","sub","sub_assign","symmetric_difference","to_owned","to_owned","toggle","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","union","unlink","writable","write","write","write_at","write_block"],"q":["easy_fs","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["Use a block size of 512 bytes","Trait for block devices which reads and writes data in the …","Allow create","An easy file system on block /// 块设备上的简单fs","","Cached file metadata in memory","Virtual filesystem layer over easy-fs","Open file flags","Read only","Read &amp; Write","Clear file and return an empty one","Array of u8 slice that user communicate with os …","Write only","Returns the set containing all flags.","Allocate a data block 分配新的数据块","Allocate a new inode 分配新索引节点","Returns the intersection between the two sets of flags.","Disables all flags disabled in the set.","Returns the union of the two sets of flags.","Adds the set of flags.","Returns the raw value of the flags currently stored.","Returns the left flags, but with all the right flags …","Toggles the set of flags.","Real device","","","","","","","","","","","U8 vec","Clear the data in current inode …","","","","","","Returns the complement of this set of flags.","Returns <code>true</code> if all of the flags in <code>other</code> are contained …","A data block of block size 从块设备创建文件系统 ","Create inode under current inode by name. Attention: use …","Data bitmap","Deallocate a data block","Returns the difference between the flags in <code>self</code> and <code>other</code>.","Returns an empty set of flags.","","","","Find a file","Find inode under current inode by name …","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Convert from underlying bit representation, unless that …","Convert from underlying bit representation, dropping any …","Convert from underlying bit representation, preserving all …","","Get data block by id 得到数据块","Get inode by id 得到inode","","FileSystem Inode","Inode bitmap","Inserts the specified flags in-place.","Returns the intersection between the flags in <code>self</code> and …","Returns <code>true</code> if there are flags common to both <code>self</code> and …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Returns <code>true</code> if all flags are currently set.","Returns <code>true</code> if no flags are currently stored.","Length of <code>UserBuffer</code>","Create a hard link to source file","Create a <code>UserBuffer</code> by parameter","Create a vfs inode","","Returns the complement of this set of flags.","Current offset","Open a file","Open a block device as a filesystem …","","","Open options: able to read","Read data from current inode …","Read data form block to buffer 将编号为 block_id …","Do not check validity for simplicity Return (readable, …","","List inodes under the target directory","List inodes by id under current inode …","Removes the specified flags in-place.","Get the root inode of the filesystem …","Inserts or removes the specified flags depending on the …","Returns the set difference of the two sets of flags.","Disables all flags enabled in the set.","Returns the symmetric difference between the flags in <code>self</code> …","","","Toggles the specified flags in-place.","","","","","","","","","","","","","","","","Returns the union of between the flags in <code>self</code> and <code>other</code>.","Remove a hard link","","","Open options: able to write","Write data to current inode 对当前索引节点写数据","Write data from buffer to block"],"i":[0,0,1,0,0,0,0,0,1,1,1,0,1,1,2,2,1,1,1,1,1,1,1,2,2,16,4,1,5,2,16,4,1,5,16,4,1,5,1,5,1,1,1,2,4,2,2,1,1,5,1,1,23,4,1,1,1,1,1,2,16,4,1,5,1,1,1,1,2,2,1,5,2,1,1,1,2,16,4,1,5,1,1,16,23,16,4,5,1,5,23,2,1,5,5,4,8,1,5,23,4,1,2,1,1,1,1,1,5,1,2,16,4,1,5,2,16,4,1,5,2,16,4,1,5,1,23,5,5,5,4,8],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,[[],1],[2,3],[2,3],[[1,1],1],[[1,1]],[[1,1],1],[[1,1]],[1,3],[[1,1],1],[[1,1]],0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,[4],[1,1],[5,5],[[]],[[]],[[1,1],6],[1,1],[[1,1],7],[[[9,[8]],3,3],[[9,[[10,[2]]]]]],[[4,11],[[12,[[9,[4]]]]]],0,[[2,3]],[[1,1],1],[[],1],[[7,7],5],[[1,1],7],[[1,13]],[11,[[12,[[9,[4]]]]]],[[4,11],[[12,[[9,[4]]]]]],[[1,14],15],[[1,14],15],[[1,14],15],[[1,14],15],[[1,14],15],[[]],[[]],[[]],[[]],[[]],[3,[[12,[1]]]],[3,1],[3,1],[13,1],[[2,3],3],[[2,3]],[1],0,0,[[1,1]],[[1,1],1],[[1,1],7],[[]],[[]],[[]],[[]],[[]],[1,7],[1,7],[16,17],[[11,11],18],[19,16],[[3,17,[9,[[10,[2]]]],[9,[8]]],4],[[7,7,[9,[4]]],5],[1,1],0,[[11,1],[[12,[[9,[5]]]]]],[[[9,[8]]],[[9,[[10,[2]]]]]],[[1,1],[[12,[6]]]],[[5,16],18],0,[[4,17],17],[17],[1],[5,7],[11,[[12,[[19,[20]]]]]],[4,[[19,[20]]]],[[1,1]],[9,4],[[1,1,7]],[[1,1],1],[[1,1]],[[1,1],1],[[]],[[]],[[1,1]],[[],21],[[],21],[[],21],[[],21],[[],21],[[],21],[[],21],[[],21],[[],21],[[],21],[[],22],[[],22],[[],22],[[],22],[[],22],[[1,1],1],[11,18],[5,7],[[5,16],18],0,[[4,17],17],[17]],"p":[[3,"OpenFlags"],[3,"EasyFileSystem"],[15,"u32"],[3,"Inode"],[3,"FileHandle"],[4,"Ordering"],[15,"bool"],[8,"BlockDevice"],[3,"Arc"],[3,"Mutex"],[15,"str"],[4,"Option"],[8,"IntoIterator"],[3,"Formatter"],[6,"Result"],[3,"UserBuffer"],[15,"usize"],[15,"isize"],[3,"Vec"],[3,"String"],[4,"Result"],[3,"TypeId"],[8,"FSManager"]]},\
"log":{"doc":"A lightweight logging facade.","t":[13,13,13,13,13,13,4,4,8,3,3,13,3,3,3,17,3,13,13,13,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,14,10,11,11,11,11,11,11,11,14,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,14,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,14,14,5,11,11,11,11,11,11,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,5,5,11,11,11,11,11,11,14,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,14],"n":["Debug","Debug","Error","Error","Info","Info","Level","LevelFilter","Log","Metadata","MetadataBuilder","Off","ParseLevelError","Record","RecordBuilder","STATIC_MAX_LEVEL","SetLoggerError","Trace","Trace","Warn","Warn","args","args","as_str","as_str","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","build","build","builder","builder","clone","clone","clone","clone","cmp","cmp","cmp","cmp","debug","enabled","eq","eq","eq","eq","eq","eq","eq","error","file","file","file_static","file_static","flush","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from_str","from_str","ge","ge","ge","ge","gt","gt","gt","gt","hash","hash","hash","hash","info","into","into","into","into","into","into","into","into","iter","iter","le","le","le","le","level","level","level","level","line","line","log","log","log_enabled","logger","lt","lt","lt","lt","max","max","max_level","metadata","metadata","module_path","module_path","module_path_static","module_path_static","new","new","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","set_logger","set_logger_racy","set_max_level","target","target","target","target","to_level","to_level_filter","trace","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","warn"],"q":["logd":["The “debug” level.","Corresponds to the <code>Debug</code> log level.","The “error” level.","Corresponds to the <code>Error</code> log level.","The “info” level.","Corresponds to the <code>Info</code> log level.","An enum representing the available verbosity levels of the …","An enum representing the available verbosity level filters …","A trait encapsulating the operations required of a logger.","Metadata about a log message.","Builder for <code>Metadata</code>.","A level lower than all log levels.","The type returned by <code>from_str</code> when the string doesn’t …","The “payload” of a log message.","Builder for <code>Record</code>.","The statically resolved maximum log level.","The type returned by <code>set_logger</code> if <code>set_logger</code> has already …","The “trace” level.","Corresponds to the <code>Trace</code> log level.","The “warn” level.","Corresponds to the <code>Warn</code> log level.","The message body.","Set <code>args</code>.","Returns the string representation of the <code>Level</code>.","Returns the string representation of the <code>LevelFilter</code>.","","","","","","","","","","","","","","","","","Invoke the builder and return a <code>Record</code>","Returns a <code>Metadata</code> object.","Returns a new builder.","Returns a new builder.","","","","","","","","","Logs a message at the debug level.","Determines if a log message with the specified metadata …","","","","","","","","Logs a message at the error level.","The source file containing the message.","Set <code>file</code>","The module path of the message, if it is a <code>&#39;static</code> string.","Set <code>file</code> to a <code>&#39;static</code> string.","Flushes any buffered records.","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","","","","","Logs a message at the info level.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Iterate through all supported logging levels.","Iterate through all supported filtering levels.","","","","","The verbosity level of the message.","Set <code>Metadata::level</code>.","The verbosity level of the message.","Setter for <code>level</code>.","The line containing the message.","Set <code>line</code>","Logs the <code>Record</code>.","The standard logging macro.","Determines if a message logged at the specified level in …","Returns a reference to the logger.","","","","","Returns the most verbose logging level.","Returns the most verbose logging level filter.","Returns the current maximum log level.","Metadata about the log directive.","Set <code>metadata</code>. Construct a <code>Metadata</code> object with …","The module path of the message.","Set <code>module_path</code>","The module path of the message, if it is a <code>&#39;static</code> string.","Set <code>module_path</code> to a <code>&#39;static</code> string","Construct new <code>RecordBuilder</code>.","Construct a new <code>MetadataBuilder</code>.","","","","","","","Sets the global logger to a <code>&amp;&#39;static Log</code>.","A thread-unsafe version of <code>set_logger</code>.","Sets the global maximum log level.","The name of the target of the directive.","Set <code>Metadata::target</code>","The name of the target of the directive.","Setter for <code>target</code>.","Converts <code>self</code> to the equivalent <code>Level</code>.","Converts the <code>Level</code> to the equivalent <code>LevelFilter</code>.","Logs a message at the trace level.","","","","","","","","","","","","","","","","","","","","","","","","","Logs a message at the warn level."],"i":[4,6,4,6,4,6,0,0,0,0,0,6,0,0,0,0,0,4,6,4,6,1,3,4,6,4,6,1,3,8,7,15,11,4,6,1,3,8,7,15,11,3,7,1,8,4,6,1,8,4,6,8,7,0,19,4,4,6,6,8,7,11,0,1,3,1,3,19,4,4,6,6,1,3,8,7,15,15,11,11,4,6,1,3,8,7,15,11,4,6,4,4,6,6,4,4,6,6,4,6,8,7,0,4,6,1,3,8,7,15,11,4,6,4,4,6,6,1,3,8,7,1,3,19,0,0,0,4,4,6,6,4,6,0,1,3,1,3,1,3,3,7,4,4,6,6,8,7,0,0,0,1,3,8,7,6,4,0,4,6,1,3,8,7,15,11,4,6,1,3,8,7,15,11,4,6,1,3,8,7,15,11,0],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[1,2],[[3,2],3],[4,5],[6,5],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[3,1],[7,8],[[],3],[[],7],[4,4],[6,6],[1,1],[8,8],[[4,4],9],[[6,6],9],[[8,8],9],[[7,7],9],0,[8,10],[[4,6],10],[[4,4],10],[[6,4],10],[[6,6],10],[[8,8],10],[[7,7],10],[[11,11],10],0,[1,[[12,[5]]]],[[3,[12,[5]]],3],[1,[[12,[5]]]],[[3,[12,[5]]],3],[[]],[[4,13],14],[[4,13],14],[[6,13],14],[[6,13],14],[[1,13],14],[[3,13],14],[[8,13],14],[[7,13],14],[[15,13],14],[[15,13],14],[[11,13],14],[[11,13],14],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[5,[[16,[4]]]],[5,[[16,[6]]]],[[4,4],10],[[4,6],10],[[6,6],10],[[6,4],10],[[4,4],10],[[4,6],10],[[6,4],10],[[6,6],10],[4],[6],[8],[7],0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],17],[[],17],[[4,6],10],[[4,4],10],[[6,4],10],[[6,6],10],[1,4],[[3,4],3],[8,4],[[7,4],7],[1,[[12,[18]]]],[[3,[12,[18]]],3],[1],0,0,[[],19],[[4,4],10],[[4,6],10],[[6,4],10],[[6,6],10],[[],4],[[],6],[[],6],[1,8],[[3,8],3],[1,[[12,[5]]]],[[3,[12,[5]]],3],[1,[[12,[5]]]],[[3,[12,[5]]],3],[[],3],[[],7],[[4,6],[[12,[9]]]],[[4,4],[[12,[9]]]],[[6,6],[[12,[9]]]],[[6,4],[[12,[9]]]],[[8,8],[[12,[9]]]],[[7,7],[[12,[9]]]],[19,[[16,[15]]]],[19,[[16,[15]]]],[6],[1,5],[[3,5],3],[8,5],[[7,5],7],[6,[[12,[4]]]],[4,6],0,[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],0],"p":[[3,"Record"],[3,"Arguments"],[3,"RecordBuilder"],[4,"Level"],[15,"str"],[4,"LevelFilter"],[3,"MetadataBuilder"],[3,"Metadata"],[4,"Ordering"],[15,"bool"],[3,"ParseLevelError"],[4,"Option"],[3,"Formatter"],[6,"Result"],[3,"SetLoggerError"],[4,"Result"],[8,"Iterator"],[15,"u32"],[8,"Log"],[3,"TypeId"]]},\
"spin":{"doc":"This crate provides spin-based versions of the primitives …","t":[2,2,2,2,2,2,2,2,2,0,0,0,0,0,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,11,11,11,11,11,11,11,11,11,11,11,11,3,3,3,3,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,18,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,3,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["Barrier","Lazy","Mutex","MutexGuard","Once","RwLock","RwLockReadGuard","RwLockUpgradableGuard","RwLockWriteGuard","barrier","lazy","mutex","once","rw_lock","Barrier","BarrierWaitResult","borrow","borrow","borrow_mut","borrow_mut","from","from","into","into","is_leader","new","try_from","try_from","try_into","try_into","type_id","type_id","wait","Lazy","borrow","borrow_mut","default","deref","fmt","force","from","into","new","try_from","try_into","type_id","Mutex","MutexGuard","SpinMutex","SpinMutexGuard","TicketMutex","TicketMutexGuard","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","default","default","default","deref","deref","deref","deref_mut","deref_mut","deref_mut","drop","drop","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","force_unlock","force_unlock","force_unlock","from","from","from","from","from","from","from","from","from","from","from","from","get_mut","get_mut","get_mut","into","into","into","into","into","into","into_inner","into_inner","into_inner","is_locked","is_locked","is_locked","leak","leak","leak","lock","lock","lock","new","new","new","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_lock","try_lock","try_lock","type_id","type_id","type_id","type_id","type_id","type_id","INIT","Once","borrow","borrow_mut","call_once","drop","fmt","from","from","from","get","get_mut","initialized","into","is_completed","new","poll","try_from","try_into","try_into_inner","type_id","wait","RwLock","RwLockReadGuard","RwLockUpgradableGuard","RwLockWriteGuard","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","default","deref","deref","deref","deref_mut","downgrade","downgrade","downgrade_to_upgradeable","drop","drop","drop","fmt","fmt","fmt","fmt","fmt","fmt","fmt","force_read_decrement","force_write_unlock","from","from","from","from","from","from","get_mut","into","into","into","into","into_inner","leak","leak","leak","new","read","reader_count","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_read","try_upgrade","try_upgradeable_read","try_write","type_id","type_id","type_id","type_id","upgrade","upgradeable_read","write","writer_count"],"q":["spin","","","","","","","","","","","","","","spin::barrier","","","","","","","","","","","","","","","","","","","spin::lazy","","","","","","","","","","","","","spin::mutex","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","spin::once","","","","","","","","","","","","","","","","","","","","","","spin::rw_lock","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["","","","","","","","","","Synchronization primitive allowing multiple threads to …","Synchronization primitives for lazy evaluation.","Locks that have the same behaviour as a mutex.","Synchronization primitives for one-time evaluation.","A lock that provides data access to either one writer or …","A primitive that synchronizes the execution of multiple …","A <code>BarrierWaitResult</code> is returned by <code>wait</code> when all threads …","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Returns whether this thread from <code>wait</code> is the “leader …","Creates a new barrier that can block a given number of …","","","","","","","Blocks the current thread until all threads have …","A value which is initialized on the first access.","","","Creates a new lazy value using <code>Default</code> as the initializing …","","","Forces the evaluation of this lazy value and returns a …","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Creates a new lazy value with the given initializing …","","","","A spin-based lock providing mutually exclusive access to …","A generic guard that will protect some data access and …","A spin lock providing mutually exclusive access to data.","A guard that provides mutable data access.","A spin-based ticket lock providing mutually exclusive …","A guard that protects some data.","","","","","","","","","","","","","","","","","","","","","","The dropping of the MutexGuard will release the lock it …","","","","","","","","","","","Force unlock this <code>SpinMutex</code>.","Force unlock this <code>TicketMutex</code>, by serving the next ticket.","Force unlock this <code>Mutex</code>.","Returns the argument unchanged.","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Returns the argument unchanged.","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns a mutable reference to the underlying data.","Returns a mutable reference to the underlying data.","Returns a mutable reference to the underlying data.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Consumes this <code>SpinMutex</code> and unwraps the underlying data.","Consumes this <code>TicketMutex</code> and unwraps the underlying data.","Consumes this <code>Mutex</code> and unwraps the underlying data.","Returns <code>true</code> if the lock is currently held.","Returns <code>true</code> if the lock is currently held.","Returns <code>true</code> if the lock is currently held.","Leak the lock guard, yielding a mutable reference to the …","Leak the lock guard, yielding a mutable reference to the …","Leak the lock guard, yielding a mutable reference to the …","Locks the <code>SpinMutex</code> and returns a guard that permits …","Locks the <code>TicketMutex</code> and returns a guard that permits …","Locks the <code>Mutex</code> and returns a guard that permits access to …","Creates a new <code>SpinMutex</code> wrapping the supplied data.","Creates a new <code>TicketMutex</code> wrapping the supplied data.","Creates a new <code>Mutex</code> wrapping the supplied data.","","","","","","","","","","","","","Try to lock this <code>SpinMutex</code>, returning a lock guard if …","Try to lock this <code>TicketMutex</code>, returning a lock guard if …","Try to lock this <code>Mutex</code>, returning a lock guard if …","","","","","","","Initialization constant of <code>Once</code>.","A primitive that provides lazy one-time initialization.","","","Performs an initialization routine once and only once. The …","","","","Returns the argument unchanged.","","Returns a reference to the inner value if the <code>Once</code> has …","Returns a mutable reference to the inner value if the <code>Once</code> …","Creates a new initialized <code>Once</code>.","Calls <code>U::from(self)</code>.","Returns a reference to the inner value if the <code>Once</code> has …","Creates a new <code>Once</code>.","Like <code>Once::get</code>, but will spin if the <code>Once</code> is in the …","","","Returns a the inner value if the <code>Once</code> has been initialized.","","Spins until the <code>Once</code> contains a value.","A lock that provides data access to either one writer or …","A guard that provides immutable data access.","A guard that provides immutable data access but can be …","A guard that provides mutable data access.","","","","","","","","","","","","","","Downgrades the writable lock guard to a readable, shared …","Downgrades the upgradeable lock guard to a readable, …","Downgrades the writable lock guard to an upgradable, …","","","","","","","","","","","Force decrement the reader count.","Force unlock exclusive write access.","Returns the argument unchanged.","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns a mutable reference to the underlying data.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Consumes this <code>RwLock</code>, returning the underlying data.","Leak the lock guard, yielding a reference to the …","Leak the lock guard, yielding a mutable reference to the …","Leak the lock guard, yielding a reference to the …","Creates a new spinlock wrapping the supplied data.","Locks this rwlock with shared read access, blocking the …","Return the number of readers that currently hold the lock …","","","","","","","","","Attempt to acquire this lock with shared read access.","Tries to upgrade an upgradeable lock guard to a writable …","Tries to obtain an upgradeable lock guard.","Attempt to lock this rwlock with exclusive write access.","","","","","Upgrades an upgradeable lock guard to a writable lock …","Obtain a readable lock guard that can later be upgraded to …","Lock this rwlock with exclusive write access, blocking the …","Return the number of writers that currently hold the lock."],"i":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,1,4,1,4,1,4,1,1,4,4,1,4,1,4,1,4,0,8,8,8,8,8,8,8,8,8,8,8,8,0,0,0,0,0,0,14,17,15,18,16,19,14,17,15,18,16,19,14,15,16,17,18,19,17,18,19,17,18,14,17,17,15,18,18,16,19,19,14,15,16,14,14,14,17,15,15,15,18,16,16,16,19,14,15,16,14,17,15,18,16,19,14,15,16,14,15,16,17,18,19,14,15,16,14,15,16,14,17,15,18,16,19,14,17,15,18,16,19,14,15,16,14,17,15,18,16,19,23,0,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,0,0,0,0,24,25,26,27,24,25,26,27,24,25,26,27,26,26,27,26,25,26,27,24,25,25,26,26,27,27,24,24,24,24,24,25,26,27,24,24,25,26,27,24,25,26,27,24,24,24,24,25,26,27,24,25,26,27,24,27,24,24,24,25,26,27,27,24,24,24],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[1,2],[3,4],[[],5],[[],5],[[],5],[[],5],[[],6],[[],6],[4,1],0,[[]],[[]],[[],[[8,[7]]]],[[[8,[9]]]],[[[8,[10]],11],12],[8],[[]],[[]],[[],8],[[],5],[[],5],[[],6],0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],[[14,[[0,[13,7]]]]]],[[],[[15,[[0,[13,7]]]]]],[[],[[16,[[0,[13,7]]]]]],[[[17,[13]]]],[[[18,[13]]]],[[[19,[13]]]],[[[17,[13]]]],[[[18,[13]]]],[[[19,[13]]]],[[[17,[13]]]],[[[18,[13]]]],[[[14,[[0,[13,10]]]],11],12],[[[17,[[0,[13,10]]]],11],12],[[[17,[[0,[13,20]]]],11],12],[[[15,[[0,[13,10]]]],11],12],[[[18,[[0,[13,10]]]],11],12],[[[18,[[0,[13,20]]]],11],12],[[[16,[[0,[13,10]]]],11],12],[[[19,[[0,[13,20]]]],11],12],[[[19,[[0,[13,10]]]],11],12],[[[14,[13]]]],[[[15,[13]]]],[[[16,[13]]]],[[]],[[],14],[21],[[]],[[]],[[],15],[21],[[]],[[],16],[21],[[]],[[]],[[[14,[13]]]],[[[15,[13]]]],[[[16,[13]]]],[[]],[[]],[[]],[[]],[[]],[[]],[14],[15],[16],[[[14,[13]]],2],[[[15,[13]]],2],[[[16,[13]]],2],[[[17,[13]]]],[[[18,[13]]]],[[[19,[13]]]],[[[14,[13]]],[[17,[13]]]],[[[15,[13]]],[[18,[13]]]],[[[16,[13]]],[[19,[13]]]],[[],14],[[],15],[[],16],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[[14,[13]]],[[22,[[17,[13]]]]]],[[[15,[13]]],[[22,[[18,[13]]]]]],[[[16,[13]]],[[22,[[19,[13]]]]]],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],0,0,[[]],[[]],[[23,9]],[23],[[[23,[10]],11],12],[21],[[]],[[],23],[23,22],[23,22],[[],23],[[]],[23,2],[[],23],[23,22],[[],5],[[],5],[23,22],[[],6],[23],0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],[[24,[[0,[13,7]]]]]],[[[25,[13]]]],[[[26,[13]]]],[[[27,[13]]]],[[[26,[13]]]],[[[26,[13]]],[[25,[13]]]],[[[27,[13]]],[[25,[13]]]],[[[26,[13]]],[[27,[13]]]],[[[25,[13]]]],[[[26,[13]]]],[[[27,[13]]]],[[[24,[[0,[13,10]]]],11],12],[[[25,[[0,[13,20]]]],11],12],[[[25,[[0,[13,10]]]],11],12],[[[26,[[0,[13,20]]]],11],12],[[[26,[[0,[13,10]]]],11],12],[[[27,[[0,[13,20]]]],11],12],[[[27,[[0,[13,10]]]],11],12],[[[24,[13]]]],[[[24,[13]]]],[[]],[[],24],[21],[[]],[[]],[[]],[[[24,[13]]]],[[]],[[]],[[]],[[]],[24],[[[25,[13]]]],[[[26,[13]]]],[[[27,[13]]]],[[],24],[[[24,[13]]],[[25,[13]]]],[[[24,[13]]],3],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[[24,[13]]],[[22,[[25,[13]]]]]],[[[27,[13]]],[[5,[[26,[13]],[27,[13]]]]]],[[[24,[13]]],[[22,[[27,[13]]]]]],[[[24,[13]]],[[22,[[26,[13]]]]]],[[],6],[[],6],[[],6],[[],6],[[[27,[13]]],[[26,[13]]]],[[[24,[13]]],[[27,[13]]]],[[[24,[13]]],[[26,[13]]]],[[[24,[13]]],3]],"p":[[3,"BarrierWaitResult"],[15,"bool"],[15,"usize"],[3,"Barrier"],[4,"Result"],[3,"TypeId"],[8,"Default"],[3,"Lazy"],[8,"FnOnce"],[8,"Debug"],[3,"Formatter"],[6,"Result"],[8,"Sized"],[3,"SpinMutex"],[3,"TicketMutex"],[3,"Mutex"],[3,"SpinMutexGuard"],[3,"TicketMutexGuard"],[3,"MutexGuard"],[8,"Display"],[15,"never"],[4,"Option"],[3,"Once"],[3,"RwLock"],[3,"RwLockReadGuard"],[3,"RwLockWriteGuard"],[3,"RwLockUpgradableGuard"]]},\
"virtio_drivers":{"doc":"VirtIO guest drivers.","t":[13,13,3,13,13,13,13,4,13,13,4,13,13,8,13,13,13,13,13,4,3,13,13,13,13,13,13,13,13,13,13,13,13,6,13,13,4,6,13,13,13,13,13,13,13,6,3,3,3,3,3,3,13,13,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,10,10,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,10,11,11],"n":["AbsInfo","AlreadyUsed","BlkResp","Block","BufferTooSmall","Console","Crypto","DeviceType","DmaError","EntropySource","Error","EvBits","GPU","Hal","IOMMU","IdDevids","IdName","IdSerial","Input","InputConfigSelect","InputEvent","Invalid","InvalidParam","IoErr","IoError","IoMemory","Mac80211","Memory","MemoryBalloon","MemoryBallooning","Network","NotReady","Ok","PhysAddr","PropBits","Pstore","RespStatus","Result","Rpmsg","RprocSerial","ScsiHost","SignalDistributionModule","Socket","Timer","Unsupported","VirtAddr","VirtIOBlk","VirtIOConsole","VirtIOGpu","VirtIOHeader","VirtIOInput","VirtIONet","VirtioCAIF","_9P","_NotReady","ack_interrupt","ack_interrupt","ack_interrupt","ack_interrupt","ack_interrupt","ack_interrupt","begin_init","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","can_recv","can_send","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","code","config_space","default","default","device_type","dma_alloc","dma_dealloc","eq","eq","eq","event_type","finish_init","flush","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","into","into","into","into","into","into","into","into","into","into","into","into","mac","max_queue_size","move_cursor","new","new","new","new","new","notify","phys_to_virt","pop_pending_event","pop_used","query_config_select","queue_physical_page_number","queue_set","queue_used","read_block","read_block_nb","recv","recv","resolution","send","send","setup_cursor","setup_framebuffer","status","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","value","vendor_id","verify","virt_queue_size","virt_to_phys","write_block","write_block_nb"],"q":["virtio_drivers","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["subsel specifies the absolute axis using ABS_* constants …","The queue is already in use.","Response of a VirtIOBlk request.","","The buffer is too small.","","","Types of virtio devices.","Failed to alloc DMA memory.","","The error type of VirtIO drivers.","subsel specifies the event type using EV_* constants in …","","The interface which a particular hardware implementation …","","Returns ID information of the device, in u.ids. subsel is …","Returns the name of the device, in u.string. subsel is …","Returns the serial number of the device, in u.string. …","","Select value used for <code>VirtIOInput::query_config_select()</code>.","Both queues use the same <code>virtio_input_event</code> struct. <code>type</code>, …","","Invalid parameter.","IoErr.","I/O Error","","","","","","","The device is not ready.","Ok.","A physical address as used for virtio.","Returns input properties of the device, in u.bitmap. …","","Status of a VirtIOBlk request.","The type returned by driver methods.","","","","","","","Unsupported yet.","A virtual memory address in the address space of the …","The virtio block device is a simple virtual block device …","Virtio console. Only one single port is allowed since ``…","A virtio based graphics adapter.","MMIO Device Legacy Register Interface.","Virtual human interface devices such as keyboards, mice …","The virtio network device is a virtual ethernet card.","","","Not ready.","Acknowledge interrupt.","Acknowledge interrupt.","Acknowledge interrupt.","Acknowledge interrupt and return true if success.","Acknowledge interrupt and process events.","Acknowledge interrupt.","Begin initializing the device.","","","","","","","","","","","","","","","","","","","","","","","","","Whether can receive packet.","Whether can send packet.","","","","","","","","","Event code.","Get the pointer to config space (at offset 0x100)","","","Get the device type.","Allocates the given number of contiguous physical pages of …","Deallocates the given contiguous physical DMA memory pages.","","","","Event type.","Finish initializing the device.","Flush framebuffer to screen.","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Get MAC address.","Get the max size of queue.","Move the pointer without updating the shape.","Create a new VirtIO-Blk driver.","Create a new VirtIO-Console driver.","Create a new VirtIO-Gpu driver.","Create a new VirtIO-Input driver.","Create a new VirtIO-Net driver.","Notify device.","Converts a physical address used for virtio to a virtual …","Pop the pending event.","During an interrupt, it fetches a token of a completed …","Query a specific piece of information by <code>select</code> and <code>subsel</code>…","Get guest physical page number of the virtual queue.","Set queue.","Whether the queue is in used.","Read a block.","Read a block in a non-blocking way which means that it …","Try get char.","Receive a packet.","Get the resolution (width, height).","Put a char onto the device.","Send a packet.","Set the pointer shape and position.","Setup framebuffer","Return the status of a VirtIOBlk request.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Event value.","Get the vendor ID.","Verify a valid header.","Return size of its VirtQueue. It can be used to tell the …","Converts a virtual address which the program can access to …","Write a block.","Arguments"],"i":[12,14,0,17,14,17,17,0,14,17,0,12,17,0,17,12,12,12,17,0,0,17,14,11,14,17,17,17,17,17,17,14,11,0,12,17,0,0,17,17,17,17,17,17,11,0,0,0,0,0,0,0,17,17,11,2,4,6,7,8,9,7,2,4,6,7,8,9,16,11,17,12,13,14,2,4,6,7,8,9,16,11,17,12,13,14,9,9,11,12,13,14,11,12,13,14,13,7,16,13,7,1,1,11,17,14,13,7,6,16,11,17,12,13,14,2,4,6,7,8,9,16,11,17,12,13,14,2,4,6,7,8,9,16,11,17,12,13,14,9,7,6,2,4,6,8,9,7,1,8,2,8,7,7,7,2,2,4,9,6,4,9,6,6,16,11,12,13,14,2,4,6,7,8,9,16,11,17,12,13,14,2,4,6,7,8,9,16,11,17,12,13,14,2,4,6,7,8,9,16,11,17,12,13,14,13,7,7,2,1,2,2],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[[2,[1]]],3],[[[4,[1]]],[[5,[3]]]],[[[6,[1]]],3],[7,3],[[[8,[1]]],3],[[[9,[1]]],3],[[7,10]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[9,[1]]],3],[[[9,[1]]],3],[11,11],[12,12],[13,13],[14,14],[[]],[[]],[[]],[[]],0,[7,15],[[],16],[[],13],[7,17],[18,19],[[19,18],20],[[11,11],3],[[17,17],3],[[14,14],3],0,[7],[[[6,[1]]],5],[[16,21],22],[[11,21],22],[[17,21],22],[[12,21],22],[[13,21],22],[[14,21],22],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[9,[1]]]],[7,23],[[[6,[1]],23,23],5],[7,[[5,[[2,[1]]]]]],[7,[[5,[[4,[1]]]]]],[7,[[5,[[6,[1]]]]]],[7,[[5,[[8,[1]]]]]],[7,[[5,[[9,[1]]]]]],[[7,23]],[19,24],[[[8,[1]]],[[25,[13]]]],[[[2,[1]]],[[5,[26]]]],[[[8,[1]],12,27],27],[[7,23],23],[[7,23,23,23,23]],[[7,23],3],[[[2,[1]],18],5],[[[2,[1]],18,16],[[5,[26]]]],[[[4,[1]],3],[[5,[[25,[27]]]]]],[[[9,[1]]],[[5,[18]]]],[[[6,[1]]]],[[[4,[1]],27],5],[[[9,[1]]],5],[[[6,[1]],23,23,23,23],5],[[[6,[1]]],5],[16,11],[[]],[[]],[[]],[[]],[[],28],[[],28],[[],28],[[],28],[[],28],[[],28],[[],28],[[],28],[[],28],[[],28],[[],28],[[],28],[[],28],[[],28],[[],28],[[],28],[[],28],[[],28],[[],28],[[],28],[[],28],[[],28],[[],28],[[],28],[[],29],[[],29],[[],29],[[],29],[[],29],[[],29],[[],29],[[],29],[[],29],[[],29],[[],29],[[],29],0,[7,23],[7,3],[[[2,[1]]],26],[24,19],[[[2,[1]],18],5],[[[2,[1]],18,16],[[5,[26]]]]],"p":[[8,"Hal"],[3,"VirtIOBlk"],[15,"bool"],[3,"VirtIOConsole"],[6,"Result"],[3,"VirtIOGpu"],[3,"VirtIOHeader"],[3,"VirtIOInput"],[3,"VirtIONet"],[8,"FnOnce"],[4,"RespStatus"],[4,"InputConfigSelect"],[3,"InputEvent"],[4,"Error"],[15,"u64"],[3,"BlkResp"],[4,"DeviceType"],[15,"usize"],[6,"PhysAddr"],[15,"i32"],[3,"Formatter"],[6,"Result"],[15,"u32"],[6,"VirtAddr"],[4,"Option"],[15,"u16"],[15,"u8"],[4,"Result"],[3,"TypeId"]]},\
"volatile":{"doc":"Provides wrapper types <code>Volatile</code>, <code>ReadOnly</code>, <code>WriteOnly</code>, …","t":[3,6,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["ReadOnly","ReadWrite","Volatile","WriteOnly","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","default","default","default","fmt","fmt","from","from","from","into","into","into","new","new","new","read","read","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","update","write","write"],"q":["volatile","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["A volatile wrapper which only allows read operations.","A volatile wrapper which allows both read and write …","A wrapper type around a volatile variable, which allows …","A volatile wrapper which only allows write operations.","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Construct a new volatile instance wrapping the given value.","Construct a new read-only volatile wrapper wrapping the …","Constructs a new write only volatile wrapper around the …","Performs a volatile read of the contained value, returning …","Perform a volatile read of the contained value, returning …","","","","","","","","","","Performs a volatile read of the contained value, passes a …","Performs a volatile write, setting the contained value to …","Performs a volatile write of value <code>value</code> into the …"],"i":[0,0,0,0,2,4,6,2,4,6,2,4,2,4,6,2,4,2,4,6,2,4,6,2,4,6,2,4,2,4,6,2,4,6,2,4,6,2,2,6],"f":[0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[[2,[1]]],[[2,[1]]]],[[[4,[[0,[3,1]]]]],[[4,[[0,[3,1]]]]]],[[],[[2,[[0,[5,1]]]]]],[[],[[4,[[0,[5,1]]]]]],[[],[[6,[[0,[5,1]]]]]],[[[2,[[0,[7,1]]]],8],9],[[[4,[[0,[7,1]]]],8],9],[[]],[[]],[[]],[[]],[[]],[[]],[1,[[2,[1]]]],[1,[[4,[1]]]],[1,[[6,[1]]]],[[[2,[1]]],1],[[[4,[1]]],1],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],11],[[],11],[[],11],[[[2,[1]]]],[[[2,[1]],1]],[[[6,[1]],1]]],"p":[[8,"Copy"],[3,"Volatile"],[8,"Clone"],[3,"ReadOnly"],[8,"Default"],[3,"WriteOnly"],[8,"Debug"],[3,"Formatter"],[6,"Result"],[4,"Result"],[3,"TypeId"]]}\
}');
if (typeof window !== 'undefined' && window.initSearch) {window.initSearch(searchIndex)};
if (typeof exports !== 'undefined') {exports.searchIndex = searchIndex};
